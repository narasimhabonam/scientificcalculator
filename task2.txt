import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
public class ScientificCalculator extends JFrame implements ActionListener {
    private JTextField textField;
    private double firstOperand, secondOperand;
    private char operator;
    private boolean isResultDisplayed;

    public ScientificCalculator() {
        setTitle("Scientific Calculator");
        setSize(400, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        textField = new JTextField();
        textField.setFont(new Font("Arial", Font.PLAIN, 24));
        textField.setHorizontalAlignment(JTextField.RIGHT);
        textField.setEditable(false);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(6, 4));

        String[] buttonLabels = {
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "0", ".", "=", "+",
            "C", "√", "sin", "cos",
            "tan", "log", "ln", "exp"
        };

        for (String label : buttonLabels) {
            JButton button = new JButton(label);
            button.setFont(new Font("Arial", Font.PLAIN, 18));
            button.addActionListener(this);
            buttonPanel.add(button);
        }

        add(textField, BorderLayout.NORTH);
        add(buttonPanel);

        firstOperand = 0;
        secondOperand = 0;
        operator = ' ';
        isResultDisplayed = false;

        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();

        if (isResultDisplayed) {
            if (!Character.isDigit(command.charAt(0))) {
                isResultDisplayed = false;
                textField.setText("");
            }
        }

        if (command.equals("0") || command.equals("1") || command.equals("2") ||
            command.equals("3") || command.equals("4") || command.equals("5") ||
            command.equals("6") || command.equals("7") || command.equals("8") ||
            command.equals("9") || command.equals(".")) {
            textField.setText(textField.getText() + command);
        } else if (command.equals("+") || command.equals("-") ||
                   command.equals("*") || command.equals("/")) {
            if (textField.getText().isEmpty()) {
                operator = command.charAt(0);
            } else {
                firstOperand = Double.parseDouble(textField.getText());
                operator = command.charAt(0);
                textField.setText("");
            }
        } else if (command.equals("=")) {
            if (!textField.getText().isEmpty()) {
                secondOperand = Double.parseDouble(textField.getText());
                double result = calculate(firstOperand, secondOperand, operator);
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("C")) {
            textField.setText("");
            firstOperand = 0;
            secondOperand = 0;
            operator = ' ';
            isResultDisplayed = false;
        } else if (command.equals("√")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.sqrt(value);
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("sin")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.sin(Math.toRadians(value));
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("cos")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.cos(Math.toRadians(value));
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("tan")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.tan(Math.toRadians(value));
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("log")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.log10(value);
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("ln")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.log(value);
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        } else if (command.equals("exp")) {
            if (!textField.getText().isEmpty()) {
                double value = Double.parseDouble(textField.getText());
                double result = Math.exp(value);
                textField.setText(formatResult(result));
                isResultDisplayed = true;
            }
        }
    }

    private double calculate(double firstOperand, double secondOperand, char operator) {
        switch (operator) {
            case '+':
                return firstOperand + secondOperand;
            case '-':
                return firstOperand - secondOperand;
            case '*':
                return firstOperand * secondOperand;
            case '/':
                if (secondOperand != 0) {
                    return firstOperand / secondOperand;
                } else {
                    JOptionPane.showMessageDialog(this, "Division by zero not allowed.");
                }
        }
        return 0;
    }

    private String formatResult(double result) {
        DecimalFormat df = new DecimalFormat("#.##########");
        return df.format(result);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new ScientificCalculator();
            }
        });
    }
}